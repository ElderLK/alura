{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;IAAMA,W;;;;;;;sCAEYC,G,EAAI;AACd,gBAAG,CAACA,IAAIC,EAAR,EACI,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACP,mBAAOH,GAAP;AACA;;;4BAEGI,G,EAAK;AAAA;;AACL,mBAAOC,MAAMD,GAAN,EACNE,IADM,CACD;AAAA,uBAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,aADC,EAENM,IAFM,CAED,eAAO;AACTN,oBAAIQ,IAAJ;AACH,aAJM,CAAP;AAKH;;;6BAEIJ,G,EAAKK,I,EAAM;AAAA;;AACZ,mBAAOJ,MAAMD,GAAN,EAAW;AACdM,yBAAS,EAAC,gBAAiB,kBAAlB,EADK;AAEdC,wBAAQ,MAFM;AAGdC,sBAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHQ,aAAX,EAKNH,IALM,CAKD;AAAA,uBAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,aALC,CAAP;AAMH;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"HttpService.js","sourcesContent":["class HttpService{\r\n\r\n    _handleErrors(res){\r\n        if(!res.ok)\r\n            throw new Error(res.statusText);\r\n     return res;   \r\n    }\r\n\r\n    get(url) {\r\n        return fetch(url)\r\n        .then(res => this._handleErrors(res))\r\n        .then(res => {\r\n            res.json();\r\n        });\r\n    }\r\n\r\n    post(url, dado) {\r\n        return fetch(url, {\r\n            headers: {'Content-type' : 'application/json'},\r\n            method: 'post',\r\n            body: JSON.stringify(dado)\r\n        })\r\n        .then(res => this._handleErrors(res));\r\n    }\r\n\r\n    // get(url) {\r\n    //     return new Promise((resolve, reject) => {\r\n    //         let xhr = new XMLHttpRequest();\r\n    //         xhr.open('GET', url);\r\n        \r\n    //         xhr.onreadystatechange = () => {\r\n    //             /*\r\n    //                 0: requisição ainda não iniciada.\r\n    //                 1: conexão com o servidor estabelecida.\r\n    //                 2: requisição recebida.\r\n    //                 3: processando requisição.\r\n    //                 4: requisição concluída e a resposta esta pronta.\r\n    //             */\r\n    //           if(xhr.readyState == 4){ // req concluida\r\n    //             if (xhr.status == 200){\r\n    //                 resolve(JSON.parse(xhr.responseText));\r\n    //             } else {\r\n    //                 console.log(xhr.responseText);\r\n    //                 reject(xhr.responseText);\r\n    //             }\r\n    //           }\r\n        \r\n    //         };\r\n    //         xhr.send();\r\n    //     });\r\n    // }\r\n\r\n    // post(url, dado) {\r\n\r\n\r\n    //     return new Promise((resolve, reject) => {\r\n\r\n    //         let xhr = new XMLHttpRequest();\r\n    //         xhr.open(\"POST\", url, true);\r\n    //         xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n    //         xhr.onreadystatechange = () => {\r\n\r\n    //             if (xhr.readyState == 4) {\r\n\r\n    //                 if (xhr.status == 200) {\r\n\r\n    //                     resolve(JSON.parse(xhr.responseText));\r\n    //                 } else {\r\n\r\n    //                     reject(xhr.responseText);\r\n    //                 }\r\n    //             }\r\n    //         };\r\n    //         xhr.send(JSON.stringify(dado)); // usando JSON.stringify para converter objeto em uma string no formato JSON.\r\n    //     });\r\n\r\n    // }\r\n}"]}