{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","JSON","parse","responseText","console","log","send","dado","setRequestHeader","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;kDAEKC,G,EAAI;AACd,4BAAG,CAACA,IAAIC,EAAR,EACI,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACP,+BAAOH,GAAP;AACA;;;wCAmBGI,G,EAAK;AACL,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,gCAAIE,IAAJ,CAAS,KAAT,EAAgBN,GAAhB;;AAEAI,gCAAIG,kBAAJ,GAAyB,YAAM;AAC3B;;;;;;;AAOF,oCAAGH,IAAII,UAAJ,IAAkB,CAArB,EAAuB;AAAE;AACvB,wCAAIJ,IAAIK,MAAJ,IAAc,GAAlB,EAAsB;AAClBP,gDAAQQ,KAAKC,KAAL,CAAWP,IAAIQ,YAAf,CAAR;AACH,qCAFD,MAEO;AACHC,gDAAQC,GAAR,CAAYV,IAAIQ,YAAhB;AACAT,+CAAOC,IAAIQ,YAAX;AACH;AACF;AAEF,6BAjBD;AAkBAR,gCAAIW,IAAJ;AACH,yBAvBM,CAAP;AAwBH;;;yCAEIf,G,EAAKgB,I,EAAM;;AAGZ,+BAAO,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,gCAAIE,IAAJ,CAAS,MAAT,EAAiBN,GAAjB,EAAsB,IAAtB;AACAI,gCAAIa,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAb,gCAAIG,kBAAJ,GAAyB,YAAM;;AAE3B,oCAAIH,IAAII,UAAJ,IAAkB,CAAtB,EAAyB;;AAErB,wCAAIJ,IAAIK,MAAJ,IAAc,GAAlB,EAAuB;;AAEnBP,gDAAQQ,KAAKC,KAAL,CAAWP,IAAIQ,YAAf,CAAR;AACH,qCAHD,MAGO;;AAEHT,+CAAOC,IAAIQ,YAAX;AACH;AACJ;AACJ,6BAZD;AAaAR,gCAAIW,IAAJ,CAASL,KAAKQ,SAAL,CAAeF,IAAf,CAAT,EAlBoC,CAkBJ;AACnC,yBAnBM,CAAP;AAqBH","file":"HttpService.js","sourcesContent":["export class HttpService{\r\n\r\n    _handleErrors(res){\r\n        if(!res.ok)\r\n            throw new Error(res.statusText);\r\n     return res;   \r\n    }\r\n\r\n    // get(url) {\r\n    //     return fetch(url)\r\n    //     .then(res => this._handleErrors(res))\r\n    //     .then(res => {\r\n    //         res.json();\r\n    //     });\r\n    // }\r\n\r\n    // post(url, dado) {\r\n    //     return fetch(url, {\r\n    //         headers: {'Content-type' : 'application/json'},\r\n    //         method: 'post',\r\n    //         body: JSON.stringify(dado)\r\n    //     })\r\n    //     .then(res => this._handleErrors(res));\r\n    // }\r\n\r\n    get(url) {\r\n        return new Promise((resolve, reject) => {\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', url);\r\n        \r\n            xhr.onreadystatechange = () => {\r\n                /*\r\n                    0: requisição ainda não iniciada.\r\n                    1: conexão com o servidor estabelecida.\r\n                    2: requisição recebida.\r\n                    3: processando requisição.\r\n                    4: requisição concluída e a resposta esta pronta.\r\n                */\r\n              if(xhr.readyState == 4){ // req concluida\r\n                if (xhr.status == 200){\r\n                    resolve(JSON.parse(xhr.responseText));\r\n                } else {\r\n                    console.log(xhr.responseText);\r\n                    reject(xhr.responseText);\r\n                }\r\n              }\r\n        \r\n            };\r\n            xhr.send();\r\n        });\r\n    }\r\n\r\n    post(url, dado) {\r\n\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    if (xhr.status == 200) {\r\n\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(JSON.stringify(dado)); // usando JSON.stringify para converter objeto em uma string no formato JSON.\r\n        });\r\n\r\n    }\r\n}"]}