{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;;AAEA,IAAIA,oBACH,YAAW;AACR,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAa;AAAA;;AACT,kBAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM0B;AAClB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,YAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAG,CAACf,UAAJ,EAAe;AACXA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACA;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR,CAA0C;AAC1CA,uCAAWC,KAAX,GAAmB,YAAM;AACrB,sCAAM,IAAIC,KAAJ,CAAU,aAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBAVD;;AAYAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBAvBM,CAAP;AAwBH;AA/BL;AAAA;AAAA,yCAiCwBrB,UAjCxB,EAiCmC;AAC3BH,uBAAOyB,OAAP,CAAgB,iBAAS;AACrB,wBAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAgD;AAC5CzB,mCAAW0B,iBAAX,CAA6BD,KAA7B;AACH;AACDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBALD;AAMH;AAxCL;AAAA;AAAA,4CA0C2B5B,UA1C3B,EA0CsC;AAC9BC;AACA;AACAD,6BAAa,IAAb;AACH;AA9CL;;AAAA;AAAA;AAgDH,CAxDD,EADA","file":"ConnectionFactory.js","sourcesContent":["// Module Pattern\r\n\r\nvar ConnectionFactory = \r\n(function (){\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe';\r\n\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    return class ConnectionFactory {\r\n        \r\n        constructor(){\r\n            throw new Error('Não é permitido criar instâncias dessa classe');\r\n        }\r\n\r\n        static getConnection(){\r\n            return new Promise((resolve, reject) => {\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStore( e.target.result);\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n                    if(!connection){\r\n                        connection = e.target.result;\r\n                        // Monkey Patch\r\n                        close = connection.close.bind(connection);;\r\n                        connection.close = () => {\r\n                            throw new Error('Not allowed');\r\n                        };\r\n                    }\r\n                    resolve(connection);\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static _createStore(connection){\r\n            stores.forEach( store => {\r\n                if( connection.objectStoreNames.contains(store)){\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n            })\r\n        }\r\n\r\n        static closeConnection(connection){\r\n            close();\r\n            // Reflect.apply(close, connection, []);\r\n            connection = null;\r\n        }\r\n    }\r\n})();\r\n\r\n"]}