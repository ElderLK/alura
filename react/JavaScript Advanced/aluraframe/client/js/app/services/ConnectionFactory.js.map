{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAUA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;;;;oDAEqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,YAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAG,CAAChB,UAAJ,EAAe;AACXA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACA;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR,CAA0C;AAC1CA,+CAAWC,KAAX,GAAmB,YAAM;AACrB,8CAAM,IAAIE,KAAJ,CAAU,aAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BAVD;;AAYAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAvBM,CAAP;AAwBH;;;iDAEmBtB,U,EAAW;AAC3BH,+BAAO0B,OAAP,CAAgB,iBAAS;AACrB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAgD;AAC5C1B,2CAAW2B,iBAAX,CAA6BD,KAA7B;AACH;AACD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBALD;AAMH;;;oDAEsB7B,U,EAAW;AAC9BC;AACA;AACAD,qCAAa,IAAb;AACH","file":"ConnectionFactory.js","sourcesContent":["    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe';\r\n\r\n    let connection = null;\r\n    let close = null;\r\n\r\n    export class ConnectionFactory {\r\n        \r\n        constructor(){\r\n            throw new Error('Não é permitido criar instâncias dessa classe');\r\n        }\r\n\r\n        static getConnection(){\r\n            return new Promise((resolve, reject) => {\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStore( e.target.result);\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n                    if(!connection){\r\n                        connection = e.target.result;\r\n                        // Monkey Patch\r\n                        close = connection.close.bind(connection);;\r\n                        connection.close = () => {\r\n                            throw new Error('Not allowed');\r\n                        };\r\n                    }\r\n                    resolve(connection);\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static _createStore(connection){\r\n            stores.forEach( store => {\r\n                if( connection.objectStoreNames.contains(store)){\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n            })\r\n        }\r\n\r\n        static closeConnection(connection){\r\n            close();\r\n            // Reflect.apply(close, connection, []);\r\n            connection = null;\r\n        }\r\n    }\r\n\r\n\r\n"]}