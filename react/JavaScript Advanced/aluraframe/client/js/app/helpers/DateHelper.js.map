{"version":3,"sources":["../../app-es6/helpers/DateHelper.js"],"names":["DateHelper","Error","data","getDate","getMonth","getFullYear","texto","test","Date","split","reverse","map","item","indice"],"mappings":";;;;;;;;IAAMA,U;AAEJ,wBAAc;AAAA;;AACZ,UAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACD;;;;kCAEoBC,I,EAAM;AACzB,aAAOA,KAAKC,OAAL,KACC,GADD,IACQD,KAAKE,QAAL,KAAiB,CADzB,IAEC,GAFD,GAEOF,KAAKG,WAAL,EAFd;AAGD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;kCAEqBC,K,EAAO;;AAE1B;AACA,UAAG,CAAC,sBAAsBC,IAAtB,CAA2BD,KAA3B,CAAJ,EACI,MAAM,IAAIL,KAAJ,CAAU,uCAAV,CAAN;;AAEJ;AACA,gDAAWO,IAAX,mCAAmBF,MAAMG,KAAN,CAAY,GAAZ,EAAiBC,OAAjB,GAA2BC,GAA3B,CAA+B,UAACC,IAAD,EAAOC,MAAP;AAAA,eAAkBD,OAAOC,SAAS,CAAlC;AAAA,OAA/B,CAAnB;AACH","file":"DateHelper.js","sourcesContent":["class DateHelper {\r\n\r\n  constructor() {\r\n    throw new Error('Helper não pode ser instanciada');\r\n  }\r\n\r\n  static dataParaTexto(data) {\r\n    return data.getDate()\r\n          + '/' + (data.getMonth() +1)\r\n          + '/' + data.getFullYear();\r\n  }\r\n\r\n  // static textoParaData(texto) {\r\n  //   if(!/\\d{4}-\\d{2}-\\d{2}/.test(texto))\r\n  //       throw new Error('Deve estar no formado YYYY-mm-dd');\r\n  //   return new Date(\r\n  //     ...texto\r\n  //     .split('-')\r\n  //     .map((item, index) => item - (index % 2)));\r\n  // }\r\n\r\n  static textoParaData(texto) {\r\n\r\n    // mudamos a validação para aceitar o novo formato!\r\n    if(!/\\d{2}\\/\\d{2}\\/\\d{4}/.test(texto)) \r\n        throw new Error('Data deve estar no formato dd/mm/aaaa');\r\n\r\n    // veja que usamos no split '/' no lugar de '-'. Usamos `reverse` também para ficar ano/mes/dia.      \r\n    return new Date(...texto.split('/').reverse().map((item, indice) => item - indice % 2));\r\n}\r\n\r\n}"]}